= Bento
Bento is a Rails account management engine.

== Disclaimer
Don't expect everything to work as described below. The gem is still in early beta.

== Requirements
Currently it has a lot of pre conditions. The goal is to get rid of as many of them as possible but right new Bento expects the following:
* The account model has a name and a plan column (Bento can generate the migrations too)
* You have a model named User to keep track of users
- The users has a first_name, last_name, email and password fields

== Installation
 gem install bento
 rails generate bento account
 rake db:migrate

== Model
Currently Bento requires that you're model for account management is named Account.
If you run:
  rails generate bento account
your Account model will call bento_account which will load account functionality into our model.

== Routes
Bento sets up the following routes that you can use, complete with views and controllers:
* [GET] sign_up_accounts - account and user creation in once
* [GET] new_accounts - for just account creation
* [GET] accounts - show
* [GET] account - index
* [POST] accounts - create
* [PUT] account - update
* [DELETE] account - destroy

== Views and controllers
=== Access the current account:
There is a current_account helper in your controllers and views which returns the currently logged in user's account.

=== Automatic scoping
If you're using inherited_resources in your controllers you can do the below to scope your resource to the current account.
  class MyController < ApplicationController
    scoped_to_account
  end

=== Admin managed account
Bento can give you a complete CRUD for creating accounts. Use
  rails generate bento:views
If your current_user respond to admin? These actions will only be accessible by users that respond with true.

== Configuring controllers

You can customize the accounts controller by following these steps:

1) Create your custom accounts controller, AccountsController
    class AccountsController < Bento::AccountsController
    end

2) Tell the router to use this controller:
    resources :accounts

3) And since we changed the controller, it won't use the gem's views so make sure to make some and put in app/views/accounts.

=== Override specific pieces
The default behavior is to redirect to the accounts show view after creation.
This can be changed by overriding the after_create_url method:
  class CustomAccountsController < Bento::AccountsController
    protected
    def after_create_url
      custom_account_path(resource)
    end
  end

== Credits and contributors

* The contributors of the awesome Devise gem from which I've borrowed a lot of ideas and patterns.
* Elabs for sponsoring
* Jonas Nicklas for helping me boot strap the engine.
* All the gems that this gem depends on.
